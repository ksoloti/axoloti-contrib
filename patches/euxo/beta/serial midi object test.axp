<patch-1.0 appVersion="1.0.11">
   <obj type="gpio/serial/config" uuid="8ec617bbe7b552a58656442e87513d8b4c69833a" name="config_1" x="28" y="0">
      <params/>
      <attribs>
         <combo attributeName="baudrate" selection="31250"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="126" y="28" text="&lt; midi baudrate 31250"/>
   <patchobj type="patch/object" uuid="a540feda-44ce-4d5d-96f3-775a9f42348c" name="midi in serial2" x="28" y="56">
      <params/>
      <attribs>
         <text attributeName="script">
            <sText><![CDATA[/* updated scripted based on "extra midi input.axh" 
 * org. by Johannes Taelman
 * mod by Paul
 * Rev.1.0
 * 
 * This script reads midi messages by serial port 2 (PA2/TX & PA3/RX).
 * You will need to initialize the serial port by config object ("gpio/serial/config").
 * For Midi receive use a baudrate of 31250. 
 * 
 * For more information check the midi handle routine at: midi.c and serial_midi.c
 * https://github.com/axoloti/axoloti/tree/master/firmware
 * 
 * known bugs:
 * - If midi messages haven't been send continuously till exit "live" mode the Axoloti Core will be disconnected from Patcher and needs to be powered off/on before it connects to Patcher again.
 *	Midi message will be still transmitted and read only a connection to Axoloti Patch won't work.  
 *
 */

uint8_t *midiReceive;

uint8_t StatusToMsgLength(uint8_t t){
	switch(t) {
	case 0x0:
	case 0x1:
	case 0x2:
	case 0x3:
	case 0x4:
	case 0x5:
	case 0x6:
	case 0x7:
		return 0;
	case 0x8:
	case 0x9:
	case 0xa:
	case 0xb:
		return 3;
	case 0xc:
	case 0xd:
		return 2;
	case 0xe:
		return 3;
	default:
		return -1;
	}
}

uint8_t SysToMsgLength(uint8_t t){
    switch(t) {
	case 0x0:
		return -1; // 0xf0=sysex start. may vary
	case 0x1:
		return 2; // 0xf1=MIDI Time Code. 2 bytes
	case 0x2:
		return 3; // 0xf2=MIDI Song position. 3 bytes
	case 0x3:
		return 2; // 0xf3=MIDI Song Select. 2 bytes.
	case 0x4:
		return 1; // 0xf4=undefined
	case 0x5:
		return 1; // 0xf5=undefined
	case 0x6:
		return 1; // 0xf6=TUNE Request
	case 0x7:
		return 1; // 0xf7=sysex end.
	case 0x8:
		return 1; // 0xf8=timing clock. 1 byte
	case 0x9:
		return 1; // 0xf9=proposed measure end?
	case 0xa:
		return 1; // 0xfa=start. 1 byte
	case 0xb:
		return 1; // 0xfb=continue. 1 byte
	case 0xc:
		return 1; // 0xfc=stop. 1 byte
	case 0xd:
		return 1; // 0xfd=undefined
	case 0xe:
		return 1; // 0xfe=active sensing. 1 byte
	case 0xf:
	default:
		return 3; // 0xff= not reset, but a META-EVENT, which is always 3 bytes
	}
}

unsigned char MidiByte0;
unsigned char MidiByte1;
unsigned char MidiByte2;
unsigned char MidiCurData;
unsigned char MidiNumData;

void setup(void){
	static uint8_t _midiReceive[5] __attribute__ ((section (".sram2")));
	midiReceive = _midiReceive;
	MidiNumData = 0;
  	MidiCurData = 0;
	LogTextMessage("=============== Axo Serial 2 Debug =============== ");
}

void MidiInByteHandler(uint8_t data) {
	int8_t len;
  if (data & 0x80) {
    len = StatusToMsgLength(data >> 4);
    if (len == -1) {
      len = SysToMsgLength(data - 0xF0);
    }
    if (len == 1) {
      MidiInMsgHandler((midi_device_t)MIDI_DEVICE_INTERNAL, 0,data,0,0);
    } else {
      MidiByte0 = data;
      MidiNumData = len - 1;
      MidiCurData = 0;
    }
  }
  else // not a status byte
  {
    if (MidiCurData == 0) {
      MidiByte1 = data;
      if (MidiNumData == 1) {
        // 2 byte message complete
        MidiInMsgHandler((midi_device_t)MIDI_DEVICE_INTERNAL, 0,MidiByte0, MidiByte1, 0);
        MidiCurData = 0;
      }
      else
        MidiCurData++;
    }
    else if (MidiCurData == 1) {
      MidiByte2 = data;
      if (MidiNumData == 2) {
		MidiInMsgHandler((midi_device_t)MIDI_DEVICE_INTERNAL, 1, MidiByte0, MidiByte1,MidiByte2);
		//LogTextMessage("MIDITYPE: %i CC#: %i Value: %i", MidiByte0, MidiByte1,MidiByte2);

      }
    }
  }
}

void loop(void){
	char ch = sdGet(&SD2);
   	MidiInByteHandler(ch);	
}
]]></sText>
         </text>
      </attribs>
      <object id="patch/object" uuid="a540feda-44ce-4d5d-96f3-775a9f42348c">
         <sDescription>moded script object for midi serial 2.</sDescription>
         <author>Paul</author>
         <license>BSD</license>
         <helpPatch>script.axh</helpPatch>
         <inlets/>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <text name="script"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[attr_script
msg_t ThreadX2(){
  #if CH_USE_REGISTRY
  chRegSetThreadName("serialmidi2");
  #endif
  setup();
  while(!chThdShouldTerminate()){
    	loop();
    	//chThdSleepMilliseconds(1);
  }
  chThdExit((msg_t)0);
}
static msg_t ThreadX(void *arg) {
  ((attr_parent *)arg)->ThreadX2();
}
WORKING_AREA(waThreadX, 1024);
Thread *Thd;]]></code.declaration>
         <code.init><![CDATA[Thd = chThdCreateStatic(waThreadX, sizeof(waThreadX),
                    NORMALPRIO, (tfunc_t)ThreadX, NULL);]]></code.init>
         <code.dispose><![CDATA[chThdTerminate(Thd);
chThdWait(Thd);]]></code.dispose>
      </object>
   </patchobj>
   <comment type="patch/comment" x="98" y="70" text="check bug description inside of script head"/>
   <comment type="patch/comment" x="98" y="84" text="&lt; if script is empty use:"/>
   <hyperlink type="patch/hyperlink" name="https://github.com/HerrPaule/Euxoloti/blob/master/Euxoloti%201.2/Software/Axoloti/midi_receive_serial2_script.txt" x="112" y="98"/>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="CC#1" x="28" y="140">
      <params>
         <frac32.u.map name="value" MidiCC="1" value="59.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="CC#2" x="112" y="140">
      <params>
         <frac32.u.map name="value" MidiCC="2" value="26.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="CC#3" x="196" y="140">
      <params>
         <frac32.u.map name="value" MidiCC="3" value="30.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="CC#4" x="280" y="140">
      <params>
         <frac32.u.map name="value" MidiCC="4" value="23.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="CC#5" x="28" y="238">
      <params>
         <frac32.u.map name="value" MidiCC="5" value="23.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="CC#6" x="112" y="238">
      <params>
         <frac32.u.map name="value" MidiCC="6" value="23.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="CC#7" x="196" y="238">
      <params>
         <frac32.u.map name="value" MidiCC="7" value="23.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="CC#8" x="280" y="238">
      <params>
         <frac32.u.map name="value" MidiCC="8" value="23.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="midi/in/monitor" uuid="b51863ca-6afa-4d29-acfd-c8c2fe06cb16" name="monitor_1" x="28" y="350">
      <params>
         <bool32.tgl name="ControlChange" value="0"/>
         <bool32.tgl name="Note" value="0"/>
         <bool32.tgl name="ProgramChange" value="0"/>
         <bool32.tgl name="Bend" value="0"/>
         <bool32.tgl name="PolyPressure" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="tb/midi/utils/midithru" uuid="b3868bd5-625c-4482-9948-a34e59fe2a21" name="midithru_1" x="140" y="350">
      <params/>
      <attribs>
         <combo attributeName="input" selection="internal port 1"/>
         <combo attributeName="output" selection="usb device port 1"/>
         <combo attributeName="led" selection="on"/>
      </attribs>
   </obj>
   <obj type="jt/debug_threads" uuid="ccfd56d2-6206-4133-a813-8f057f7b195e" name="debug_threads_1" x="280" y="350">
      <params>
         <bool32.mom name="dump" value="0"/>
      </params>
      <attribs/>
   </obj>
   <nets/>
   <settings>
      <subpatchmode>no</subpatchmode>
      <MidiChannel>1</MidiChannel>
      <NPresets>8</NPresets>
      <NPresetEntries>32</NPresetEntries>
      <NModulationSources>8</NModulationSources>
      <NModulationTargetsPerSource>8</NModulationTargetsPerSource>
      <Author>Paul</Author>
      <Attributions></Attributions>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>683</x>
      <y>155</y>
      <width>1035</width>
      <height>833</height>
   </windowPos>
</patch-1.0>